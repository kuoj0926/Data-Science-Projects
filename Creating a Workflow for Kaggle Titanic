{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "train = pd.read_csv('train.csv')\n",
    "holdout = pd.read_csv('test.csv')\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# %load functions.py\n",
    "def process_missing(df):\n",
    "    \"\"\"Handle various missing values from the data set\n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    holdout = process_missing(holdout)\n",
    "    \"\"\"\n",
    "    df[\"Fare\"] = df[\"Fare\"].fillna(train[\"Fare\"].mean())\n",
    "    df[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")\n",
    "    return df\n",
    "\n",
    "def process_age(df):\n",
    "    \"\"\"Process the Age column into pre-defined 'bins' \n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    train = process_age(train)\n",
    "    \"\"\"\n",
    "    df[\"Age\"] = df[\"Age\"].fillna(-0.5)\n",
    "    cut_points = [-1,0,5,12,18,35,60,100]\n",
    "    label_names = [\"Missing\",\"Infant\",\"Child\",\"Teenager\",\"Young Adult\",\"Adult\",\"Senior\"]\n",
    "    df[\"Age_categories\"] = pd.cut(df[\"Age\"],cut_points,labels=label_names)\n",
    "    return df\n",
    "\n",
    "def process_fare(df):\n",
    "    \"\"\"Process the Fare column into pre-defined 'bins' \n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    train = process_fare(train)\n",
    "    \"\"\"\n",
    "    cut_points = [-1,12,50,100,1000]\n",
    "    label_names = [\"0-12\",\"12-50\",\"50-100\",\"100+\"]\n",
    "    df[\"Fare_categories\"] = pd.cut(df[\"Fare\"],cut_points,labels=label_names)\n",
    "    return df\n",
    "\n",
    "def process_cabin(df):\n",
    "    \"\"\"Process the Cabin column into pre-defined 'bins' \n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    train process_cabin(train)\n",
    "    \"\"\"\n",
    "    df[\"Cabin_type\"] = df[\"Cabin\"].str[0]\n",
    "    df[\"Cabin_type\"] = df[\"Cabin_type\"].fillna(\"Unknown\")\n",
    "    df = df.drop('Cabin',axis=1)\n",
    "    return df\n",
    "\n",
    "def process_titles(df):\n",
    "    \"\"\"Extract and categorize the title from the name column \n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    train = process_titles(train)\n",
    "    \"\"\"\n",
    "    titles = {\n",
    "        \"Mr\" :         \"Mr\",\n",
    "        \"Mme\":         \"Mrs\",\n",
    "        \"Ms\":          \"Mrs\",\n",
    "        \"Mrs\" :        \"Mrs\",\n",
    "        \"Master\" :     \"Master\",\n",
    "        \"Mlle\":        \"Miss\",\n",
    "        \"Miss\" :       \"Miss\",\n",
    "        \"Capt\":        \"Officer\",\n",
    "        \"Col\":         \"Officer\",\n",
    "        \"Major\":       \"Officer\",\n",
    "        \"Dr\":          \"Officer\",\n",
    "        \"Rev\":         \"Officer\",\n",
    "        \"Jonkheer\":    \"Royalty\",\n",
    "        \"Don\":         \"Royalty\",\n",
    "        \"Sir\" :        \"Royalty\",\n",
    "        \"Countess\":    \"Royalty\",\n",
    "        \"Dona\":        \"Royalty\",\n",
    "        \"Lady\" :       \"Royalty\"\n",
    "    }\n",
    "    extracted_titles = df[\"Name\"].str.extract(' ([A-Za-z]+)\\.',expand=False)\n",
    "    df[\"Title\"] = extracted_titles.map(titles)\n",
    "    return df\n",
    "\n",
    "def create_dummies(df,column_name):\n",
    "    \"\"\"Create Dummy Columns (One Hot Encoding) from a single Column\n",
    "\n",
    "    Usage\n",
    "    ------\n",
    "\n",
    "    train = create_dummies(train,\"Age\")\n",
    "    \"\"\"\n",
    "    dummies = pd.get_dummies(df[column_name],prefix=column_name)\n",
    "    df = pd.concat([df,dummies],axis=1)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def process(df):\n",
    "    df = process_missing(df)\n",
    "    df = process_age(df)\n",
    "    df = process_fare(df)\n",
    "    df = process_titles(df)\n",
    "    df = process_cabin(df)\n",
    "    \n",
    "    for col in ['Age_categories','Fare_categories','Title','Cabin_type','Sex']:\n",
    "        df = create_dummies(df, col)\n",
    "        \n",
    "    return df\n",
    "\n",
    "train = process(train)\n",
    "holdout = process(holdout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 43 columns):\n",
      "PassengerId                   891 non-null int64\n",
      "Survived                      891 non-null int64\n",
      "Pclass                        891 non-null int64\n",
      "Name                          891 non-null object\n",
      "Sex                           891 non-null object\n",
      "Age                           891 non-null float64\n",
      "SibSp                         891 non-null int64\n",
      "Parch                         891 non-null int64\n",
      "Ticket                        891 non-null object\n",
      "Fare                          891 non-null float64\n",
      "Embarked                      891 non-null object\n",
      "Age_categories                891 non-null category\n",
      "Fare_categories               891 non-null category\n",
      "Title                         891 non-null object\n",
      "Cabin_type                    891 non-null object\n",
      "Age_categories_Missing        891 non-null uint8\n",
      "Age_categories_Infant         891 non-null uint8\n",
      "Age_categories_Child          891 non-null uint8\n",
      "Age_categories_Teenager       891 non-null uint8\n",
      "Age_categories_Young Adult    891 non-null uint8\n",
      "Age_categories_Adult          891 non-null uint8\n",
      "Age_categories_Senior         891 non-null uint8\n",
      "Fare_categories_0-12          891 non-null uint8\n",
      "Fare_categories_12-50         891 non-null uint8\n",
      "Fare_categories_50-100        891 non-null uint8\n",
      "Fare_categories_100+          891 non-null uint8\n",
      "Title_Master                  891 non-null uint8\n",
      "Title_Miss                    891 non-null uint8\n",
      "Title_Mr                      891 non-null uint8\n",
      "Title_Mrs                     891 non-null uint8\n",
      "Title_Officer                 891 non-null uint8\n",
      "Title_Royalty                 891 non-null uint8\n",
      "Cabin_type_A                  891 non-null uint8\n",
      "Cabin_type_B                  891 non-null uint8\n",
      "Cabin_type_C                  891 non-null uint8\n",
      "Cabin_type_D                  891 non-null uint8\n",
      "Cabin_type_E                  891 non-null uint8\n",
      "Cabin_type_F                  891 non-null uint8\n",
      "Cabin_type_G                  891 non-null uint8\n",
      "Cabin_type_T                  891 non-null uint8\n",
      "Cabin_type_Unknown            891 non-null uint8\n",
      "Sex_female                    891 non-null uint8\n",
      "Sex_male                      891 non-null uint8\n",
      "dtypes: category(2), float64(2), int64(5), object(6), uint8(28)\n",
      "memory usage: 117.2+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean       0.523008\n",
       "std        1.102743\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        0.000000\n",
       "75%        1.000000\n",
       "max        8.000000\n",
       "Name: SibSp, dtype: float64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['SibSp'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7faeef012438>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nD6JWM132j2+DAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faef0b4a780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "train['SibSp'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7faeecfafbe0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faef0b9fef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sibsp_pivot = train.pivot_table(index='SibSp',values='Survived')\n",
    "sibsp_pivot.plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    891.000000\n",
       "mean       0.381594\n",
       "std        0.806057\n",
       "min        0.000000\n",
       "25%        0.000000\n",
       "50%        0.000000\n",
       "75%        0.000000\n",
       "max        6.000000\n",
       "Name: Parch, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Parch'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7faeecf08390>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nPN1///06duzYadefU8WAue/IkSMqLS3Vk08+qaSkJLfjTKsFCxZo//79ikQi+tvf/qZXXnnF7UjT\nZufOnfJ4PFq6dKlM05Q5D69Z6ejoUFdXl3bt2qVt27bp1VdfdTvStBkfH1dXV5d++MMfqqurSwsX\nLlRNTc1p159TxWD35jfMTuPj4yotLVVFRYVKSkrcjuOY5ORk3Xrrrdq3b5/bUaZNR0eHWltbdeWV\nV+quu+7Snj17dPfdd7sda1otXrxYknTppZdq1apV6uycP59usGTJEqWlpWnZsmWSpNLSUnV1dZ12\n/TlVDMuXL1dfX58++OADjY2NqbGxcd5dHTFf/zUmSffcc4/8fr82bNjgdpRp9/HHH2tkZESSdOzY\nMb344ovxcyrzwebNm3Xo0CEdOHBAjY2NKigo0B/+8Ae3Y02b0dFRHTlyRJJ09OhRtbe369prr3U5\n1fTxeDxKS0vTu+++K0l6+eWXz3ioc9bd4HYm8/3mtzVr1igcDuuTTz7R5ZdfrqqqqvjJormuo6ND\nzzzzjHJycpSbmyvDMLR582Z973vfczvatPjwww8VCoXiJzArKip08803ux0LNsViMa1atUqGYWh8\nfFxr165VUVGR27Gm1datW7V27VodP35cV155pbZv337adbnBDQBgMacOJQEAnEcxAAAsKAYAgAXF\nAACwoBgAABYUAwDAgmIAAFhQDAAAi/8H1tNtIka+/ZQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faeecf15860>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train['Parch'].plot.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7faeecea9940>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngTHEiYgE9j+zd4dUFxl/qgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faeecdfaa90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "parch_pivot = train.pivot_table(index='Parch', values='Survived')\n",
    "parch_pivot.plot.bar(ylim=(0,0.8))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     537\n",
       "1     161\n",
       "2     102\n",
       "3      29\n",
       "5      22\n",
       "4      15\n",
       "6      12\n",
       "10      7\n",
       "7       6\n",
       "Name: Combined, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined = train['Parch']+train['SibSp']\n",
    "survived = train['Survived']\n",
    "df_dict = {\n",
    "    'Combined': combined,\n",
    "    'Survived': survived\n",
    "}\n",
    "combined_df = pd.DataFrame(df_dict)\n",
    "combined_df['Combined'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7faeece296a0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7faeecd7b208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "combined_df.pivot_table(index='Combined',values='Survived').plot.bar()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def isalone_process(df):\n",
    "    family_count = df['SibSp']+df['Parch']\n",
    "    df['isalone'] = family_count==0\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "train = isalone_process(train)\n",
    "holdout = isalone_process(holdout)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True     537\n",
       "False    354\n",
       "Name: isalone, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['isalone'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFECV\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "def select_features(df):\n",
    "    df = df.select_dtypes(include=np.number).dropna(axis=1)\n",
    "    all_X = df.drop(['PassengerId','Survived'], axis=1)\n",
    "    all_y = df['Survived']\n",
    "    clf = RandomForestClassifier(random_state=1)\n",
    "    selector = RFECV(clf, cv=10)\n",
    "    selector.fit(all_X, all_y)\n",
    "    best_features = list(all_X.columns[selector.support_])\n",
    "    print(best_features)\n",
    "    return best_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Title_Miss', 'Title_Mr', 'Cabin_type_Unknown', 'Sex_female', 'Sex_male']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/dataquest/system/env/python3/lib/python3.4/site-packages/sklearn/utils/__init__.py:54: FutureWarning: Conversion of the second argument of issubdtype from `int` to `np.signedinteger` is deprecated. In future, it will be treated as `np.int64 == np.dtype(int).type`.\n",
      "  if np.issubdtype(mask.dtype, np.int):\n"
     ]
    }
   ],
   "source": [
    "best_features = select_features(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "def select_model(df, features):\n",
    "    all_X = df[features]\n",
    "    all_y = df['Survived']\n",
    "    model_list=[\n",
    "        {\n",
    "        'name':'LogisticRegression',\n",
    "        'estimator':LogisticRegression(),\n",
    "        'hyperparameters':\n",
    "            {\n",
    "            \"solver\": [\"newton-cg\", \"lbfgs\", \"liblinear\"]\n",
    "            }\n",
    "        },\n",
    "        {\n",
    "        'name':'KNeighborsClassifier',\n",
    "        'estimator':KNeighborsClassifier(),\n",
    "        'hyperparameters':\n",
    "            {\n",
    "                'n_neighbors':range(1,20,2),\n",
    "                'weights':['distance','uniform'],\n",
    "                'algorithm':['ball_tree','kd_tree','brute'],\n",
    "                'p':[1,2]\n",
    "            }\n",
    "        },\n",
    "        {\n",
    "        'name':'RandomFOrestClassifier',\n",
    "        'estimator':RandomForestClassifier(),\n",
    "        'hyperparameters':\n",
    "            {\n",
    "                'n_estimators':[4,6,9],\n",
    "                'criterion':['entropy','gini'],\n",
    "                'max_depth':[2,5,10],\n",
    "                'max_features':['log2','sqrt'],\n",
    "                'min_samples_leaf':[1,5,8],\n",
    "                'min_samples_split':[2,3,5]\n",
    "            }\n",
    "        }]\n",
    "    for model in model_list:\n",
    "        print(model['name'])\n",
    "        print('-------------------')\n",
    "        grid = GridSearchCV(model['estimator'],param_grid=model['hyperparameters'],cv=10)\n",
    "        grid.fit(all_X,all_y)\n",
    "        model['best_parameters'] = grid.best_params_\n",
    "        model['best_score'] = grid.best_score_\n",
    "        model['best_estimator'] = grid.best_estimator_\n",
    "        \n",
    "        print('best_parameters: {}'.format(model['best_parameters']))\n",
    "        print('best_score: {}\\n'.format(model['best_score']))\n",
    "        \n",
    "    return model_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression\n",
      "-------------------\n",
      "best_parameters: {'solver': 'newton-cg'}\n",
      "best_score: 0.8092031425364759\n",
      "\n",
      "KNeighborsClassifier\n",
      "-------------------\n",
      "best_parameters: {'algorithm': 'ball_tree', 'p': 1, 'weights': 'uniform', 'n_neighbors': 5}\n",
      "best_score: 0.7721661054994389\n",
      "\n",
      "RandomFOrestClassifier\n",
      "-------------------\n",
      "best_parameters: {'max_depth': 5, 'max_features': 'log2', 'criterion': 'entropy', 'min_samples_split': 3, 'min_samples_leaf': 1, 'n_estimators': 6}\n",
      "best_score: 0.8372615039281706\n",
      "\n"
     ]
    }
   ],
   "source": [
    "best_model = select_model(train, best_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def save_submission_file(model,cols,filename='submission.csv'):\n",
    "    predictions = model.predict(holdout[cols])\n",
    "    ids = holdout['PassengerId']\n",
    "    df_dict = {\n",
    "        'PassengerId':ids,\n",
    "        'Survived':predictions\n",
    "    }\n",
    "    df = pd.DataFrame(df_dict)\n",
    "    df.to_csv(filename,index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "save_submission_file(best_model[2]['best_estimator'], best_features)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
